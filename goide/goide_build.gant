/*
 * Copyright 2013-2015 Sergey Ignatov, Alexander Zolotov, Florin Patan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.jetbrains.jps.LayoutInfo

import static org.jetbrains.jps.idea.IdeaProjectLoader.guessHome

setProperty("home", guessHome(this as Script))

includeTargets << new File("${guessHome(this as Script)}/build/scripts/utils.gant")
includeTargets << new File("${guessHome(this)}/build/scripts/libLicenses.gant")

requireProperty("buildNumber", requireProperty("build.number", snapshot))

setProperty("ch", home)
setProperty("goideHome", "$home")

// load ApplicationInfo.xml properties
ant.xmlproperty(file: "$goideHome/resources/idea/GoIDEApplicationInfo.xml", collapseAttributes: "true")

setProperty("system_selector", "GoIDE${p("component.version.major")}0")
setProperty("dryRun", false)
setProperty("jdk16", guessJdk())

//modules to compile
setProperty("pluginFilter", new File("$goideHome/plugin-list.txt").readLines())

private List<String> goidePlatformApiModules() {
  return [platformApiModules, "dom-openapi"].flatten()
}


private List goideImplementationModules() {   //modules to put into goide.jar
  return [platformImplementationModules, "dom-impl", "platform-main"].flatten()
}

private List modules() {
  return [
    "colorSchemes", goidePlatformApiModules(), goideImplementationModules(), pluginFilter
  ].flatten()
}

private List approvedJars() {
  def normalizedHome = ch.replace('\\', '/')
  def normalizedGoHome = goideHome.replace('\\', '/')
  return ["$normalizedHome/lib/", "$normalizedGoHome/lib/", "$normalizedHome/xml/relaxng/lib/"]
}

class Paths {
  final sandbox
  final distAll
  final distWin
  final distMac
  final distUnix
  final artifacts
  final ideaSystem
  final ideaConfig

  def Paths(String home) {
    sandbox = "$home/build/goide"

    distAll = "$sandbox/layout"
    distWin = "$sandbox/win"
    distMac = "$sandbox/mac"
    distUnix = "$sandbox/unix"
    artifacts = "$sandbox/artifacts"

    ideaSystem = "$sandbox/system"
    ideaConfig = "$sandbox/config"
  }
}

setProperty("paths", new Paths(home))
setProperty("buildName", "PC-$buildNumber")

target('default': "Build artifacts") {

  loadProject()

  projectBuilder.stage("Cleaning up sandbox folder")

  projectBuilder.targetFolder = "${paths.sandbox}/classes"
  projectBuilder.dryRun = dryRun

  if (!dryRun) {
    forceDelete(paths.sandbox)
    ant.mkdir(dir: paths.sandbox)
  }

  ant.tstamp() {
    format(property: "todayYear", pattern: "yyyy")
  }

  ant.patternset(id: "resources.included") {
    include(name: "**/*.properties")
    include(name: "fileTemplates/**/*")
    include(name: "inspectionDescriptions/**/*")
    include(name: "intentionDescriptions/**/*")
    include(name: "tips/**/*")
    include(name: "search/**/*")
  }

  ant.patternset(id: "resources.excluded") {
    exclude(name: "**/*.properties")
    exclude(name: "fileTemplates/**/*")
    exclude(name: "fileTemplates")
    exclude(name: "inspectionDescriptions/**/*")
    exclude(name: "inspectionDescriptions")
    exclude(name: "intentionDescriptions/**/*")
    exclude(name: "intentionDescriptions")
    exclude(name: "tips/**/*")
    exclude(name: "tips")
  }

  zipSources(home, paths.artifacts)

  def usedJars = buildModulesAndCollectUsedJars(modules(), approvedJars(), ["/ant/"])

  layoutCommunity("${paths.sandbox}/classes/production", usedJars)

  /*
  buildNSIS([paths.distAll, paths.distWin],
            "$home/build/strings.nsi", "$home/build/paths.nsi",
            "goide", false, true, system_selector)
  */

  /*
  signMacZip("goide")
  buildDmg("goide", "${home}/build/DMG_background.png")
  */
}

public layoutCommunity(String classesPath, Set usedJars) {
  setProperty("pluginFilter", new File("$goideHome/plugin-list.txt").readLines())

  if (usedJars == null) {
    usedJars = collectUsedJars(modules(), approvedJars(), ["/ant/"], null)
  }

  def appInfo = appInfoFile(classesPath)
  def paths = new Paths(home)
  buildSearchableOptions("${projectBuilder.moduleOutput(findModule("platform-resources"))}/search", [], {
    projectBuilder.moduleRuntimeClasspath(findModule("main_goide"), false).each {
      ant.pathelement(location: it)
    }
  }, "-Didea.platform.prefix=GoIDE -Didea.no.jre.check=true")

  if (!dryRun) {
    wireBuildDate("PC-${buildNumber}", appInfo)
  }

  Map args = [
    buildNumber: "PC-${buildNumber}",
    system_selector: system_selector,
    ide_jvm_args: "-Didea.platform.prefix=GoIDE -Didea.no.jre.check=true"]

  LayoutInfo layoutInfo = layoutFull(args, paths.distAll, usedJars)
  generateLicensesTable("$paths.artifacts/third-party-libraries.txt", layoutInfo.usedModules);

  layoutWin(args, paths.distWin)
  layoutUnix(args, paths.distUnix)
  layoutMac(args, paths.distMac)

  ant.echo(message: "PC-${buildNumber}", file: "${paths.distAll}/build.txt")

  def launcher = "${paths.distWin}/bin/goide.exe"
  def launcher64 = "${paths.distWin}/bin/goide64.exe"
  List resourcePaths = ["$ch/community-resources/src",
    "$ch/platform/icons/src",
    "$goideHome/resources"]
  buildWinLauncher("$ch", "$ch/bin/WinLauncher/WinLauncher.exe", launcher,
                   appInfo, "$goideHome/build/goide_launcher.properties", system_selector, resourcePaths)
  buildWinLauncher("$ch", "$ch/bin/WinLauncher/WinLauncher64.exe", launcher64,
                   appInfo, "$goideHome/build/goide64_launcher.properties", system_selector, resourcePaths)

  List pathsDist = new File("${home}/build/goide/jdk.win/jre").exists() ? [paths.distAll, paths.distWin, "${home}/build/goide/jdk.win"] : [paths.distAll, paths.distWin]
  buildWinZip("${paths.artifacts}/goidePC-${buildNumber}.zip", pathsDist)

  String tarRoot = isEap() ? "goide-$buildNumber" : "goide-${p("component.version.major")}.${p("component.version.minor")}"
  buildTarGz(tarRoot, "$paths.artifacts/goidePC-${buildNumber}-no-jdk.tar", [paths.distAll, paths.distUnix])
  if (p("jdk.linux") != "false") {
    buildTarGz(tarRoot, "$paths.artifacts/goidePC-${buildName}.tar", [paths.distAll, paths.distUnix, "${home}/build/goide/jdk.linux"], ["jre/jre/bin/*"])
  }

  String macAppRoot = isEap() ? "GoIDE ${p("component.version.major")}.${p("component.version.minor")} EAP.app/Contents" : "GoIDE.app/Contents"
  buildMacZip(macAppRoot, "${paths.artifacts}/goidePC-${buildNumber}.mac.zip", [paths.distAll], paths.distMac)
}

private layoutPlugins(layouts) {
  dir("plugins") {
    layouts.layoutPlugin("rest")
    layouts.layoutPlugin("ipnb") {
      fileset(dir: "$goideHome/ipnb/lib")
    }
  }

  layouts.layoutCommunityPlugins(ch)
}

private String appInfoFile(String classesPath) {
  return "$classesPath/idea/GoIDEApplicationInfo.xml"
}

private layoutFull(Map args, String target, Set usedJars) {
  def openapiModules = goidePlatformApiModules()
  def superLayouts = includeFile("$ch/build/scripts/layouts.gant")

  reassignAltClickToMultipleCarets("$ch")
  
  def result = layout(target) {
    dir("lib") {
      jar("util.jar") {
        module("util")
        module("util-rt")
      }

      jar("openapi.jar") {
        openapiModules.each { module it }
      }

      jar("annotations.jar") {
        module("annotations-common")
        module("annotations")
      }
      jar("extensions.jar") { module("extensions") }

      jar(([name: "goide.jar", duplicate: "preserve"])) {
        goideImplementationModules().each {
          module(it) {
            exclude(name: "**/tips/**")
          }
        }
      }

      // TODO florin: I think this is where we need to specify our Go.zip plugin. Maybe???
      /*jar("goide-pydev.jar") {
        module("goide-pydev")
      }*/

      jar("bootstrap.jar") { module("bootstrap") }
      jar("resources.jar") {
        module("platform-resources")
        module("colorSchemes")
      }

      jar("forms_rt.jar") {
        module("forms_rt")
      }

      //noinspection GroovyAssignabilityCheck
      jar([name: "resources_en.jar", duplicate: "preserve"]) {
        // custom resources should go first
        fileset(dir: "$goideHome/resources") {
          include(name: "**/tips/**")
        }
        module("platform-resources-en") {
          ant.patternset {
            exclude(name: "tips/images/switcher.png")
            exclude(name: "tips/images/navigateToFilePath.gif")
          }
        }
      }

      jar("icons.jar") { module("icons") }
      jar("boot.jar") { module("boot") }

      usedJars.each {
        fileset(file: it)
      }

      fileset(dir: "$ch/build/kotlinc/lib") {
        include(name: "kotlin-runtime.jar")
        include(name: "kotlin-reflect.jar")
      }

      dir("libpty") {
        fileset(dir: "$ch/lib/libpty") {
          exclude(name: "*.txt")
        }
      }

      dir("ext") {
        fileset(dir: "$ch/lib") {
          include(name: "cglib*.jar")
        }
      }

      dir("src") {
        fileset(dir: "$ch/lib/src") {
          include(name: "trove4j_changes.txt")
          include(name: "trove4j_src.jar")
        }

        /*jar("goide-pydev-src.zip") {
          fileset(dir: "$goideHome/pydevSrc")
        }*/

        jar("goide-openapi-src.zip") {
          fileset(dir: "$goideHome/openapi/src")
          fileset(dir: "$goideHome/psi-api/src")
        }
      }
    }

    dir("help") {
      fileset(dir: "$home/help") {
        include(name: "*.pdf")
      }
    }

    dir("helpers") {
      fileset(dir: "$goideHome/helpers")
    }

    dir("license") {
      fileset(dir: "$ch/license")
      fileset(dir: "$ch") {
        include(name: "LICENSE.txt")
        include(name: "NOTICE.txt")
      }
    }

    layoutPlugins(superLayouts)

    dir("bin") {
      fileset(dir: "$ch/bin") {
        exclude(name: "appletviewer.policy")
        include(name: "*.*")
      }
    }
  }
  patchPropertiesFile(target, args + [appendices: ["$home/build/conf/ideaJNC.properties"]])
  return result
}

private layoutWin(Map args, String target) {
  layout(target) {
    dir("bin") {
      fileset(dir: "$ch/bin/win") {
        exclude(name: "breakgen*")
      }
    }

    dir("skeletons") {
      fileset(dir: "$goideHome/skeletons") {
        include(name: "skeletons-win*.zip")
      }
    }
  }

  winScripts(target, ch, "goide.bat", args)
  winVMOptions(target, null, "goide.exe", "goide64.exe")
  ant.copy(file: "$home/help/goidehelp.jar", todir: "$target/help", failonerror: false)
}

private layoutUnix(Map args, String target) {
  layout(target) {
    dir("bin") {
      fileset(dir: "$ch/bin/linux") {
        exclude(name: "libbreakgen*")
      }
    }
  }

  ant.copy(file: "$goideHome/resources/goide128.png", tofile: "$target/bin/goide.png")

  unixScripts(target, ch, "goide.sh", args)
  unixVMOptions(target, "goide")

  ant.copy(file: "$home/help/goidehelp.jar", todir: "$target/help", failonerror: false)
}

private layoutMac(Map _args, String target) {
  layout(target) {
    dir("bin") {
      fileset(dir: "$home/bin") {
        include(name: "*.jnilib")
      }
    }

    dir("skeletons") {
      fileset(dir: "$goideHome/skeletons") {
        include(name: "skeletons-mac*.zip")
      }
    }
  }

  Map args = new HashMap(_args)
  args.icns = "$goideHome/resources/goide.icns"
  args.bundleIdentifier = "com.goide"
  args.platform_prefix = "GoIDE"
  args.help_id = "GO"
  args."idea.properties.path" = "${paths.distAll}/bin/idea.properties"
  args."idea.properties" = ["idea.no.jre.check": true, "ide.mac.useNativeClipboard": "false"];
  args.executable = "goide"
  layoutMacApp(target, ch, args)
}
